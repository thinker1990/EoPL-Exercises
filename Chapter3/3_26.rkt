(define free-variables
  (lambda (expr bound)
    (cases expression expr
           (const-exp (num) '())
           (var-exp (var)
                    (if (memq var bound)
                        '()
                        (list var)))
           (diff-exp (exp1 exp2)
                     (append (free-variables exp1 bound)
                             (free-variables exp2 bound)))
           (zero?-exp (arg)
                      (free-variables arg bound))
           (if-exp (pred consq alte)
                   (append (free-variables pred bound)
                           (free-variables consq bound)
                           (free-variables alte bound)))
           (let-exp (var value body)
                    (append (free-variables value bound)
                            (free-variables body (cons var bound))))
           (proc-exp (var body)
                     (append (free-variables body (cons var bound))))
           (call-exp (var body)
                     (append (free-variables var bound)
                             (free-variables body bound))))))

(define optimize-env
  (lambda (env frees)
    (let ((pred (lambda(var)
		  (if (or (empty-env-record? var)
			  (memq (car var) frees))
		      #t
		      #f))))
      (filter pred env))))
